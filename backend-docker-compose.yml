version: '4'

networks:
  dev:
    driver: bridge

volumes:
  dp_keys:
  app_data:

services:
  web:
    container_name:
      web
    depends_on:
      - gateway
    build:
      context: ../Frontend
      dockerfile: Dockerfile
    ports: 
      - 3000:80
    networks:
      - dev
    restart:
      on-failure

  gateway:
    container_name:
      gateway
    depends_on: 
      - chatservice
      - user_data_service
    build:
      context: ../AuthenticationGateway/AuthenticationGateway/AuthenticationGateway
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://*:80;"
    ports:
      - 8000:80
    networks:
      - dev
    volumes:
      - dp_keys:/root/.aspnet/DataProtection-Keys
  
  user_data_service:
    container_name:
      user_data_service
    build:
      context: ../UserDataService
      dockerfile: Dockerfile
    environment:
      ConnectionStrings__Default: "Server=postgres;Database=UserDataService;Port=5432;User Id=postgres;Password=postgres;"
      ASPNETCORE_URLS: "http://*:80;"
    networks:
      - dev
      
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=UserDataService
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - app_data:/var/lib/postgresql/data
    networks:
      - dev
    restart:
      on-failure

  chatservice:
    container_name: 
      chatservice
    build:
      context: ../ChatService
      dockerfile: Dockerfile
    expose:
      - 8124
    environment:
      - "SPRING_PROFILES_ACTIVE=dev,swagger"
    depends_on:
      - chatservice-db
    networks:
      - dev

  chatservice-db:
    image: postgres
    container_name: chatservice-db
    environment:
      POSTGRES_PASSWORD: Password1!
      POSTGRES_USER: dev
    expose:
      - 5432
    volumes:
      - ../ChatService/postgres:/docker-entrypoint-initdb.d
    networks:
      - dev

  redis:
    container_name: redis
    image: redis:latest
    command: redis-server --requirepass redis-password
    expose:
      - 6379
    networks:
      - dev

  game-logic-service:
    container_name: game-logic-service
    environment:
      - REDIS_HOST_NAME=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis-password
      - JWT_KEY=0u8feufbeufbefdwgbytactrvanipol]
      - USER_SERVICE_URL=http://user-service:8000 #to be changed
    build:
      context: ../GameLogicService
      dockerfile: Dockerfile
    depends_on:
      - redis
    expose:
      - 8080
    networks:
      - dev

